import * as crypto from 'crypto'
import { computeVerifier, params } from '../index.js'
import { expect } from 'chai'

const janeDoeAccount =   {
    username: `janedoe`,
    password: `j@n3d0e`,
    salt: `25F5729D0D03D18F1528AF29F7CC83257081D8C4CA1772817C5CD36605BFB12F`,
    verifier: `80DB6CDF821CE6A8AA8E6E45AC958A8E38C3E13E0F0256BB57E63D71AC631851`,
}

describe(`Test computeVerifier`, function() {
    const buf = crypto.randomBytes(32);

    [`trinitycore`, `azerothcore`].forEach((serverType) => {
        it(`Test verifier for ${serverType}`, () => {
            computeVerifier(params[serverType], buf, `tic`, `tac`)
        })

        it(`Test raise identifier length error for ${serverType}`, () => {
            expect(() => computeVerifier(params[serverType], buf, `a`.repeat(17), `tac`))
                .to
                .throw(`The identity should have maximum 16 characters`)
        })

        it(`Test raise identifier length error for ${serverType}`, () => {
            expect(() => computeVerifier(params[serverType], buf, `tic`, `a`.repeat(17)))
                .to
                .throw(`The password should have maximum 16 characters`)
        })



        it(`Test verifier generated by C++ account creation`, () => {
            const salt = Buffer.from(janeDoeAccount.salt, `hex`)

            const verifier = computeVerifier(
                params[serverType],
                salt,
                janeDoeAccount.username,
                janeDoeAccount.password
            )
            const strVerifier = verifier.toString(`hex`).toUpperCase()
            expect(janeDoeAccount.verifier).to.equal(strVerifier)
        })
    })
})